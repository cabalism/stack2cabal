#!/bin/sh

# invokes hpack and stackage-to-hackage (when needed) to produce cabal.project
# and cabal.project.freeze, passing all arguments through to cabal. Must be
# called from the same directory that contains the stack.yaml.

# TODO: rewrite as a Haskell app and release on Hackage

if [ ! -f stack.yaml ] ; then
    echo "No stack.yaml in $PWD"
    exit 1
fi

if [ ! -f cabal.project ] ||
       [ ! -f cabal.project.freeze ] ||
       [ $(find . -maxdepth 1 -type f -name "*.yaml" -newer cabal.project | wc -l) -gt 0 ] ; then
    echo "Generating cabal.project and cabal.project.freeze"
    stackage-to-hackage stack.yaml
    cabal v2-freeze # trims the constraints
fi

find . -maxdepth 2 -type f -name package.yaml -print0 | xargs -0 -r -L 1 -P 0 hpack --silent

exec cabal "$@"
